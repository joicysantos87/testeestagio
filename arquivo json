document.addEventListener('DOMContentLoaded', () => {
    // Obtém referências aos elementos do formulário e botões
    const form = document.getElementById('supplierForm');
    const cepButton = document.getElementById('cepButton');
    const addProductButton = document.getElementById('addProduct');
    const addAttachmentButton = document.getElementById('addAttachment');
    const loadingModal = document.getElementById('loadingModal');
    const productContainer = document.getElementById('productContainer');
    const attachmentContainer = document.getElementById('attachmentContainer');

    // Adiciona eventos aos botões
    cepButton.addEventListener('click', fetchAddress);
    addProductButton.addEventListener('click', addProductRow);
    addAttachmentButton.addEventListener('click', addAttachmentRow);
    form.addEventListener('submit', handleSubmit);

    /**
     * Função para buscar o endereço pelo CEP usando a API ViaCEP
     */
    function fetchAddress() {
        const cep = document.getElementById('cep').value.replace(/\D/g, '');
        if (cep.length !== 8) {
            alert('CEP inválido. Por favor, insira um CEP com 8 dígitos.');
            return;
        }

        const url = `https://viacep.com.br/ws/${cep}/json/`;

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro ao buscar endereço');
                }
                return response.json();
            })
            .then(data => {
                if (data.erro) {
                    alert('CEP não encontrado.');
                    return;
                }
                // Preenche os campos do formulário com os dados do endereço
                document.getElementById('endereco').value = data.logradouro;
                document.getElementById('bairro').value = data.bairro;
                document.getElementById('municipio').value = data.localidade;
                document.getElementById('estado').value = data.uf;
            })
            .catch(error => {
                console.error('Erro ao buscar endereço:', error);
                alert('Erro ao buscar endereço.');
            });
    }

    /**
     * Função para adicionar uma nova linha de produto ao formulário
     */
    function addProductRow() {
        const productCount = productContainer.children.length + 1;
        const productItem = document.createElement('div');
        productItem.classList.add('product-item');
        productItem.innerHTML = `
            <label>Produto - ${productCount}</label>
            <input type="text" name="descricao" placeholder="Descrição" required>
            <input type="text" name="unidade" placeholder="Unidade de Medida" required>
            <input type="number" name="quantidade" placeholder="Quantidade em Estoque" required>
            <input type="number" name="valorUnitario" placeholder="Valor Unitário" required>
            <input type="number" name="valorTotal" placeholder="Valor Total" readonly>
            <button type="button" class="deleteProduct">Excluir</button>
        `;
        productContainer.appendChild(productItem);

        // Adiciona eventos para o botão de exclusão e para atualizar o valor total
        productItem.querySelector('.deleteProduct').addEventListener('click', () => productItem.remove());
        productItem.querySelectorAll('input[name="quantidade"], input[name="valorUnitario"]').forEach(input => input.addEventListener('input', updateTotalValue));
    }

    /**
     * Função para adicionar uma nova linha de anexo ao formulário
     */
    function addAttachmentRow() {
        const attachmentCount = attachmentContainer.children.length + 1;
        const attachmentItem = document.createElement('div');
        attachmentItem.classList.add('attachment-item');
        attachmentItem.innerHTML = `
            <label>Documento anexo ${attachmentCount}</label>
            <input type="file" name="document" required>
            <button type="button" class="deleteAttachment">Excluir</button>
            <button type="button" class="viewAttachment">Visualizar</button>
        `;
        attachmentContainer.appendChild(attachmentItem);

        // Adiciona eventos para os botões de exclusão e visualização
        attachmentItem.querySelector('.deleteAttachment').addEventListener('click', () => attachmentItem.remove());
        attachmentItem.querySelector('.viewAttachment').addEventListener('click', () => {
            const fileInput = attachmentItem.querySelector('input[type="file"]');
            if (fileInput.files.length > 0) {
                const file = fileInput.files[0];
                const url = URL.createObjectURL(file);
                window.open(url, '_blank');
            }
        });
    }

    /**
     * Função para atualizar o valor total com base na quantidade e valor unitário
     * @param {Event} event - O evento de input no campo de quantidade ou valor unitário
     */
    function updateTotalValue(event) {
        const row = event.target.closest('.product-item');
        const quantity = parseFloat(row.querySelector('input[name="quantidade"]').value) || 0;
        const unitValue = parseFloat(row.querySelector('input[name="valorUnitario"]').value) || 0;
        row.querySelector('input[name="valorTotal"]').value = (quantity * unitValue).toFixed(2);
    }

    /**
     * Função para manipular o envio do formulário
     * @param {Event} event - O evento de submit do formulário
     */
    function handleSubmit(event) {
        event.preventDefault();

        // Cria um FormData a partir do formulário
        const formData = new FormData(form);
        const products = [];
        document.querySelectorAll('.product-item').forEach(row => {
            products.push({
                descricao: row.querySelector('input[name="descricao"]').value,
                unidade: row.querySelector('input[name="unidade"]').value,
                quantidade: row.querySelector('input[name="quantidade"]').value,
                valorUnitario: row.querySelector('input[name="valorUnitario"]').value,
                valorTotal: row.querySelector('input[name="valorTotal"]').value,
            });
        });

        const attachments = [];
        document.querySelectorAll('.attachment-item').forEach(row => {
            const fileInput = row.querySelector('input[name="document"]');
            if (fileInput.files.length > 0) {
                attachments.push(fileInput.files[0]);
            }
        });

        // Cria o objeto JSON com os dados do formulário e os arquivos anexos
        const jsonResult = {
            razaoSocial: formData.get('razaoSocial'),
            nomeFantasia: formData.get('nomeFantasia'),
            cnpj: formData.get('cnpj'),
            inscricaoEstadual: formData.get('inscricaoEstadual'),
            inscricaoMunicipal: formData.get('inscricaoMunicipal'),
            cep: formData.get('cep'),
            endereco: formData.get('endereco'),
            numero: formData.get('numero'),
            complemento: formData.get('complemento'),
            bairro: formData.get('bairro'),
            municipio: formData.get('municipio'),
            estado: formData.get('estado'),
            contato: formData.get('contato'),
            telefone: formData.get('telefone'),
            email: formData.get('email'),
            produtos: products,
            anexos: attachments.map(file => ({
                nome: file.name,
                tipo: file.type,
                tamanho: file.size,
                conteudo: URL.createObjectURL(file),
            })),
        };

        try {
            const jsonString = JSON.stringify(jsonResult, null, 2);
            console.log(jsonString);

            // Mostra o modal de carregamento e depois exibe a mensagem de sucesso
            loadingModal.style.display = 'flex';

            setTimeout(() => {
                loadingModal.style.display = 'none';
                alert('Dados enviados com sucesso!');
            }, 2000);
        } catch (error) {
            console.error('Erro ao gerar JSON:', error);
            alert('Erro ao gerar JSON.');
        }
    }
});
